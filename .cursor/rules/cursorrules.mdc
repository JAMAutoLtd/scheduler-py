---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
### 🔄 Initial Orientation
- **Always read `PLANNING.md`, `README.md`, `DB.md`, `TASK.md`, and `CHANGELOG.md`** at the start of a new conversation to understand the project's architecture, goals, style, and constraints, and next logical task.
- **Read all files related to the next logical task** before starting the task, tracing the Imports and Outputs of the file to determine what specifically to read to find accurate context.
- **Always aim to do ONE task at a time**, stopping to check in after each.
- **Use consistent naming conventions, file structure, and architecture patterns** as described in `PLANNING.md`.
-**Use the query tool** enabled by your MCP integration with our database when you need database information to make good development decisions; never assume what our database calls will return, and always check with query to validate expected data formats.
- **Add new sub-tasks or TODOs discovered during development** to `TASK.md` under a “Discovered During Work” section, especially for anything where placeholders are made that will be addressed later.
-**Stop regularly to update the `CHANGELOG.md` and other documentation** when significant changes are made, or revisions to our approach come up, including notes of why the changes were made, and their locations.

### 🧱 Code Structure & Modularity
- **Never create a file longer than 500 lines of code.** If a file approaches this limit, refactor by splitting it into modules or helper files.
- **Organize code into clearly separated modules**, grouped by feature or responsibility.
- **Use clear, consistent imports** (prefer relative imports within packages).
- **Notice places where our database is insufficent** while writing code and stop to recommend adding or revising tables or fields.

### 🧪 Testing & Reliability
- **Always create test unit tests for new features** (functions, classes, routes, etc).
- **When mocking data for tests always use data consistent with the unit being tested** by tracing back imports from the units.
- **After updating any logic**, check whether existing unit tests need to be updated. If so, do it.
- **Tests should live in a `/tests` folder** mirroring the main app structure.
  - Include at least:
    - 1 test for expected use
    - 1 edge case
    - 1 failure case

### ✅ Task Completion
- **Mark completed tasks in `TASK.md`** immediately after finishing them, while adding new sub-tasks or TODOs discovered during development** to `TASK.md` under a “Discovered During Work” section.
- **Add new sub-tasks or TODOs discovered during development** to `TASK.md` under a “Discovered During Work” section.

### 📎 Style & Conventions
- **Use Node.js with TypeScript** as the primary language.
- **Follow PEP8**, use type hints, and format with `black`.
- **Use data validation**.
- Write **docstrings for every function** using the appropriate style for the file being handled:

**TypeScript Example**
export class Statistics {
  /**
   * Returns the average of two numbers.
   *
   * @remarks
   * This method is part of the {@link core-library#Statistics | Statistics subsystem}.
   *
   * @param x - The first input number
   * @param y - The second input number
   * @returns The arithmetic mean of `x` and `y`
   *
   * @beta
   */
  public static getAverage(x: number, y: number): number {
    return (x + y) / 2.0;
  }
}

**Python example**
def complex(real=0.0, imag=0.0):
    """Form a complex number.

    Keyword arguments:
    real -- the real part (default 0.0)
    imag -- the imaginary part (default 0.0)
    """
    if imag == 0.0 and real == 0.0:
        return complex_zero
    ...


### 📚 Documentation & Explainability
- **Update `README.md`** when new features are added, dependencies change, or setup steps are modified.
- **Comment non-obvious code** and ensure everything is understandable to a mid-level developer.
- When writing complex logic, **add an inline `# Reason:` comment** explaining the why, not just the what.

### 🧠 AI Behavior Rules
- **Never assume missing context. Ask questions if uncertain.**
- **Never hallucinate libraries or functions** – only use known, verified packages.
- **Always confirm file paths and module names** exist before referencing them in code or tests.
